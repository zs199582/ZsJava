package cn.sortAlgorithms;

import static pers.utils.UtilsMethod.swap;

public class HollandFlag {
    //荷兰国旗问题
    //有若干红白蓝三个颜色的球随机排成一条直线，现在的任务是把这些球按照红白蓝顺序排序
    //1,2,3分别代表三个颜色的球 假设2是中间颜色白色 比2小是红色，比2大是蓝色
    //1 2 3 2 1 2 3 2 1
    //这个问题我们可以将这个问题视为一个数组排序问题，这个数组分为前部，中部和后部三个部分，每一个元素（红白蓝分别对应0、1、2）必属于其中之一。
    // 由于红、白、蓝三色小球数量并不一定相同，所以这个三个区域不一定是等分的，也就是说如果我们将整个区域放在[0,1]的区域里，由于三色小球之间数量的比不同（此处假设1:2:2），可能前部为[0,0.2)，中部为[0.2,0.6)，后部为[0.6,1]。
    // 我们的思路如下：将前部和后部各排在数组的前边和后边，中部自然就排好了。具体的：
    //设置两个标志位begin和end分别指向这个数组的开始和末尾，然后用一个标志位current从头开始进行遍历：
    //1）若遍历到的位置为0，则说明它一定属于前部，于是就和begin位置进行交换，然后current向前进，begin也向前进（表示前边的已经都排好了）。
    //2）若遍历到的位置为1，则说明它一定属于中部，根据总思路，中部的我们都不动，然后current向前进。
    //3）若遍历到的位置为2，则说明它一定属于后部，于是就和end位置进行交换，由于交换完毕后current指向的可能是属于前部的，若此时current前进则会导致该位置不能被交换到前部，所以此时current不前进。而同1），end向后退1。
    public void reorderBalls(int[]nums){
        //1个指针，比2小就和第一个元素换位置，比2大就和最后一个元素换位置
        int pre = 0;
        int end = nums.length-1;
        int curr = 0;
        while(curr<end){
            if(nums[curr]<2){
                swap(nums,pre,curr);
                curr++;
                pre++;
            }
            else if(nums[curr]>2){
                swap(nums,pre,end);
                pre++;
                end--;
            }
            else curr++;
        }
    }
}
